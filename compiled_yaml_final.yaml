apiVersion: v1
kind: Namespace
metadata:
  name: default
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: tls-secret
  labels:
    app: kube-rbac-proxy
  name: kube-rbac-proxy
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    app: kube-rbac-proxy
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tls-config-map
  annotations:
    service.beta.openshift.io/inject-cabundle: 'true'
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-rbac-proxy
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-rbac-proxy
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-rbac-proxy
subjects:
- kind: ServiceAccount
  name: kube-rbac-proxy
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-rbac-proxy
  namespace: default
rules:
- apiGroups: ["authentication.k8s.io"]
  resources:
  - tokenreviews
  verbs: ["create"]
- apiGroups: ["authorization.k8s.io"]
  resources:
  - subjectaccessreviews
  verbs: ["create"]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-rbac-proxy
  namespace: default
data:
  config-file.yaml: |+
    authorization:
      resourceAttributes:
        namespace: default
        apiVersion: v1
        resource: services
        subresource: proxy
        name: kube-rbac-proxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-rbac-proxy
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-rbac-proxy
  template:
    metadata:
      labels:
        app: kube-rbac-proxy
    spec:
      serviceAccountName: kube-rbac-proxy
      containers:
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.12.0
        args:
        - "--secure-listen-address=0.0.0.0:8443"
        - "--upstream=http://127.0.0.1:8081/"
        - "--logtostderr=true"
        - "--v=10"
        - "--tls-cert-file=/etc/tls-secret/tls.crt"
        - "--tls-private-key-file=/etc/tls-secret/tls.key"
        - "--client-ca-file=/etc/tls-cert/service-ca.crt"
        - "--config-file=/etc/kube-rbac-proxy/config-file.yaml"
        - "--allow-paths=/metrics"
        ports:
        - containerPort: 8443
          name: https
        volumeMounts:
        - name: tls-secret
          mountPath: /etc/tls-secret
        - name: ca-cert
          mountPath: /etc/tls-cert
        - name: config
          mountPath: /etc/kube-rbac-proxy
        securityContext:
          allowPrivilegeEscalation: false
      - name: prometheus-example-app
        image: quay.io/brancz/prometheus-example-app:v0.1.0
        args:
        - "--bind=127.0.0.1:8081"
      volumes:
      - name: tls-secret
        secret:
          secretName: tls-secret
      - name: ca-cert
        configMap:
          name: tls-config-map
      - name: config
        configMap:
          name: kube-rbac-proxy
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-rbac-proxy-client
rules:
- apiGroups: [""]
  resources: ["services/proxy"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-rbac-proxy-client
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-rbac-proxy-client
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
---
apiVersion: v1
kind: Pod
metadata:
  name: testcurl
  namespace: default
spec:
  containers:
  - name: curl
    image: curlimages/curl 
    command: [ "sleep", "600" ]
    volumeMounts:
      - name: cert-ca
        mountPath: /etc/config
  volumes:
    - name: cert-ca
      configMap:
        name: openshift-service-ca.crt

# Execute this in curl container of testcurl pod: curl -H "Authorization: Bearer `cat /var/run/secrets/kubernetes.io/serviceaccount/token`" --cacert /etc/config/service-ca.crt https://kube-rbac-proxy.default.svc:8443/metrics
# You will see
# # HELP version Version information about this binary
# # TYPE version gauge
# version{version="v0.1.0"} 0
